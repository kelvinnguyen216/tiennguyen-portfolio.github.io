-- Query 01: Calculate Quantity of items, Sales value & Order quantity by each Subcategory in last 12 months (LTM).
SELECT 
  FORMAT_DATE('%b %G', cast(s.ModifiedDate as date)) AS period
  , p.name as name
  , SUM(s.OrderQty) as qty_item
  , sum(LineTotal) as total_sales
  , count(distinct s.SalesOrderID) as order_cnt
FROM `adventureworks2019.Sales.SalesOrderDetail` as s
  LEFT JOIN `adventureworks2019.Production.Product` as p
  ON s.ProductID = p.ProductID
  LEFT JOIN `adventureworks2019.Production.ProductSubcategory` as ps
  ON p.ProductSubcategoryID = cast(ps.ProductSubcategoryID as string)
WHERE  date(s.ModifiedDate) between (date_sub(date(s.ModifiedDate), INTERVAL 12 month)) and '2014-06-30'
GROUP BY period, name
ORDER BY period desc

-- Query 02: Calculate %YoY growth rate by SubCategory & release top 3 category with highest grow rate (round results to 2 decimal).
WITH raw_data AS
(SELECT 
  FORMAT_DATE('%Y', cast(s.ModifiedDate as date)) as dates
  , ps.name AS name
  , sum(s.OrderQty) AS qty_item
FROM `adventureworks2019.Sales.SalesOrderDetail` AS s 
JOIN `adventureworks2019.Production.Product` AS p
ON s.ProductID = p.ProductID
JOIN `adventureworks2019.Production.ProductSubcategory` AS ps
ON p.ProductSubcategoryID = CAST(ps.ProductSubcategoryID AS STRING)
GROUP BY name, dates
ORDER BY dates
)
, prev_year AS
(SELECT 
  *
  , LAG(qty_item,1) OVER(PARTITION BY name ORDER BY dates) AS prv_qty 
FROM raw_data
)
SELECT 
  name
  , qty_item
  , prv_qty
  , ROUND(((qty_item - prv_qty)/prv_qty),2) as qty_diff
FROM prev_year
ORDER BY qty_diff DESC

-- Query 03: Ranking Top 3 TeritoryID with biggest Order quantity of every year. If there's TerritoryID with same quantity in a year, do not skip the rank number.
WITH raw_data AS 
(SELECT 
  FORMAT_DATE('%Y', CAST(s1.ModifiedDate AS DATE)) AS yr
  , s2.TerritoryID as TerritoryID
  , SUM(s1.OrderQty) AS order_cnt
FROM `adventureworks2019.Sales.SalesOrderDetail` s1
JOIN `adventureworks2019.Sales.SalesOrderHeader` s2
ON s1.SalesOrderID = s2.SalesOrderID
GROUP BY yr, TerritoryID
)
, raw_data2 AS
(SELECT *,
DENSE_RANK() OVER(PARTITION BY yr ORDER BY order_cnt DESC) AS rk
FROM raw_data
)
SELECT *
FROM raw_data2
WHERE rk IN (1,2,3)
ORDER BY yr DESC

-- Query 04: Calculate Total Discount Cost belongs to Seasonal Discount for each SubCategory.
 SELECT 
   EXTRACT(year from sales.ModifiedDate) AS year
  , sub.Name as name
  , SUM(sales.OrderQty)*sales.UnitPrice * offer.DiscountPct AS discount_cost
FROM `adventureworks2019.Sales.SalesOrderDetail` AS sales
LEFT JOIN `adventureworks2019.Sales.SpecialOffer` AS offer
ON sales.SpecialOfferID = offer.SpecialOfferID
LEFT JOIN `adventureworks2019.Production.Product` AS product
ON sales.ProductID = product.ProductID
LEFT JOIN `adventureworks2019.Production.ProductSubcategory` as sub
ON product.ProductSubcategoryID  = cast(sub.ProductSubcategoryID as string)
WHERE offer.Type = 'Seasonal Discount' 
GROUP BY year, name, sales.UnitPrice, offer.DiscountPct
ORDER BY year

-- Query 05: Retention rate of Customer in 2014 with status of Successfully Shipped (Cohort Analysis).
WITH info AS (
SELECT
  EXTRACT(MONTH FROM ModifiedDate) AS month
  , EXTRACT(YEAR FROM ModifiedDate) AS year
  , CustomerID
FROM `adventureworks2019.Sales.SalesOrderHeader`
WHERE status = 5 AND EXTRACT(YEAR FROM ModifiedDate) = 2014
)
, row_number AS (
SELECT *, ROW_NUMBER() OVER(PARTITION BY CustomerID ORDER BY month) AS row_nb
FROM info 
)
, first_order AS (
SELECT DISTINCT month as month_join, year, CustomerID
FROM row_number
WHERE row_nb = 1
)
, pre_final AS (
SELECT info.month, info.year, info.CustomerID, first_order.month_join
  , CONCAT('M',' - ',(info.month - first_order.month_join )) AS month_diff
FROM info 
LEFT JOIN first_order
ON info.CustomerID = first_order.CustomerID
ORDER BY CustomerID
)
SELECT
  pre_final.month_join
  , pre_final.month_diff
  , COUNT(DISTINCT CustomerID) as customer_cnt
FROM pre_final
GROUP BY 1,2
ORDER BY 1

-- Query 06: Trend of Stock level & MoM diff % by all product in 2011. If %gr rate is null then 0 (round to 1 decimal).
WITH stock_info AS (
SELECT 
  EXTRACT(month from t2.ModifiedDate) as mth
  , EXTRACT(year from t2.ModifiedDate) as yr
  , t1.name as name
  , SUM(t2.StockedQty) as stock_qty
FROM `adventureworks2019.Production.Product` AS t1
LEFT JOIN  `adventureworks2019.Production.WorkOrder` AS t2 
USING (ProductID)
WHERE EXTRACT(year from t2.ModifiedDate) = 2011 
GROUP BY 1,2,3
ORDER BY 1
)
, pre_final AS (
SELECT 
  name, mth, yr, stock_qty,  
  LEAD(stock_qty) OVER(PARTITION BY name ORDER BY mth DESC) as stock_prev
FROM stock_info
)
SELECT *
  , COALESCE(ROUND((stock_qty - stock_prev)*100/stock_prev , 1),0) AS diff
FROM pre_final 
ORDER BY name

-- Query 07: Calculate Ratio of Stock / Sales in 2011 by product name, by month. Order results by month desc, ratio desc (round ratio to 1 decimal mom yoy).
WITH sale_info AS (
SELECT 
  EXTRACT(month from t1.ModifiedDate) as mth
  , EXTRACT(year from t1.ModifiedDate) as yr
  , ProductID
  , t2.name 
  , SUM(OrderQty) as sales
FROM `adventureworks2019.Sales.SalesOrderDetail` as t1
LEFT JOIN `adventureworks2019.Production.Product` as  t2
USING (ProductID)
WHERE EXTRACT(year from t1.ModifiedDate) = 2011
GROUP BY 1,2,3,4
ORDER BY mth
)
, stock_info AS (
SELECT 
  EXTRACT(month from ModifiedDate) as mth
  , EXTRACT(year from ModifiedDate) as yr
  , SUM(StockedQty) as stock
  , ProductID
FROM `adventureworks2019.Production.WorkOrder`
WHERE EXTRACT(year from ModifiedDate) = 2011
GROUP BY 1,2,4
ORDER BY mth
)
, pre_final AS (
SELECT 
  mth, sale_info.yr, ProductID, name, sales, COALESCE(stock,0) as stock
FROM sale_info
LEFT JOIN stock_info
USING (ProductID, mth)
ORDER BY mth DESC 
)

SELECT *
  , ROUND(stock/sales,1) as ratio
FROM pre_final
ORDER BY mth DESC, ratio DESC

-- Query 08: No of order and value at Pending status in 2014.
SELECT 
  EXTRACT(year from ModifiedDate) as yr
  , count(distinct PurchaseOrderID) as order_cnt 
  , sum(TotalDue) as value
FROM `adventureworks2019.Purchasing.PurchaseOrderHeader`
WHERE EXTRACT(year from ModifiedDate) = 2014 AND Status = 1
GROUP BY 1
